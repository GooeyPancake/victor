{
  "behaviorID" : "DevImageCapture",
  "behaviorClass": "DevImageCapture",

  // path to save the images on the robot relative to "<reourceCacheDir>/camera/images"
  "save_path": "classes",

  // class names to cycle through by raising lift, used as subdirs to above path when saving
  // special case: use "FalseNegatives" and/or "FalsePositives" to cause images to be saved only once
  //  a any vision_mode specified below results in a detection or no detection, respectively
  "class_names": ["class_A", "class_B", "class_C"],

  // image quality: [1-100]:JPEG quality, -1: use PNG
  "quality": 100,

  // image save scale: any scale valid with ImageCache::StringToSize
  "image_scale": "full",

  // whether or not to use capacitive touch to trigger saving
  // if 0, uses power button istead
  "use_capacitive_touch" : false,

  // When in single shot saving, alongside the images save a json file (with the same name, .json extension)
  // with sensor data like cliff, prox and head angle
  "save_sensor_data" : false,
  
  // Play a shutter sound each time he takes an image in single-shot mode (including one sound for each
  // capture in multi-image mode, as defined below)
  "use_shutter_sound" : true,
  
  // Turn on/off the ability to save "streams" of images by holding the button down
  "allow_streaming" : true, 
  
  // When enabled and single-shot saving is used, this will move the robot and take additional images from
  // random poses using the given ranges. If the both elements of a range are the same, that disables that
  // kind of motion.
  "multi_image_mode" : {
    "num_images_per_capture" : 1,         // Use value > 1 to enable
    "distance_range_mm"      : [-20, 20], // Amount to move forward/backward with each capture
    "head_angle_range_deg"   : [-10, 15], // Absolute head angle range
    "body_angle_range_deg"   : [-45, 45]  // Relative body angle range
  },
  
  // list of strings specifying vision modes to enable while running, 
  // other than "SavingImages" and "MirrorMode" (which are always enabled)
  // see visionModes.clad/h for the names of available vision modes
  // NOTE: modes will be scheduled with "Standard" frequency
  "vision_modes": []  // e.g. ["DetectingPeople", "DetectingMarkers", "DetectingFaces"]
}
